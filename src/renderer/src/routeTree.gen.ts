/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutUsersImport } from './routes/_layout/users'
import { Route as LayoutReservationsImport } from './routes/_layout/reservations'
import { Route as LayoutReportsImport } from './routes/_layout/reports'
import { Route as LayoutNewsImport } from './routes/_layout/news'
import { Route as LayoutEventsImport } from './routes/_layout/events'
import { Route as LayoutCategoryImport } from './routes/_layout/category'
import { Route as LayoutApplicationsImport } from './routes/_layout/applications'
import { Route as LayoutUsersUserIdImport } from './routes/_layout/users.$userId'
import { Route as LayoutEventsEventIdImport } from './routes/_layout/events.$eventId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutUsersRoute = LayoutUsersImport.update({
  path: '/users',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutReservationsRoute = LayoutReservationsImport.update({
  path: '/reservations',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutReportsRoute = LayoutReportsImport.update({
  path: '/reports',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsRoute = LayoutNewsImport.update({
  path: '/news',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutEventsRoute = LayoutEventsImport.update({
  path: '/events',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCategoryRoute = LayoutCategoryImport.update({
  path: '/category',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutApplicationsRoute = LayoutApplicationsImport.update({
  path: '/applications',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUsersUserIdRoute = LayoutUsersUserIdImport.update({
  path: '/$userId',
  getParentRoute: () => LayoutUsersRoute,
} as any)

const LayoutEventsEventIdRoute = LayoutEventsEventIdImport.update({
  path: '/$eventId',
  getParentRoute: () => LayoutEventsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/applications': {
      id: '/_layout/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof LayoutApplicationsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/category': {
      id: '/_layout/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof LayoutCategoryImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/events': {
      id: '/_layout/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof LayoutEventsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news': {
      id: '/_layout/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof LayoutNewsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/reports': {
      id: '/_layout/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof LayoutReportsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/reservations': {
      id: '/_layout/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof LayoutReservationsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/users': {
      id: '/_layout/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof LayoutUsersImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/events/$eventId': {
      id: '/_layout/events/$eventId'
      path: '/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof LayoutEventsEventIdImport
      parentRoute: typeof LayoutEventsImport
    }
    '/_layout/users/$userId': {
      id: '/_layout/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof LayoutUsersUserIdImport
      parentRoute: typeof LayoutUsersImport
    }
  }
}

// Create and export the route tree

interface LayoutEventsRouteChildren {
  LayoutEventsEventIdRoute: typeof LayoutEventsEventIdRoute
}

const LayoutEventsRouteChildren: LayoutEventsRouteChildren = {
  LayoutEventsEventIdRoute: LayoutEventsEventIdRoute,
}

const LayoutEventsRouteWithChildren = LayoutEventsRoute._addFileChildren(
  LayoutEventsRouteChildren,
)

interface LayoutUsersRouteChildren {
  LayoutUsersUserIdRoute: typeof LayoutUsersUserIdRoute
}

const LayoutUsersRouteChildren: LayoutUsersRouteChildren = {
  LayoutUsersUserIdRoute: LayoutUsersUserIdRoute,
}

const LayoutUsersRouteWithChildren = LayoutUsersRoute._addFileChildren(
  LayoutUsersRouteChildren,
)

interface LayoutRouteChildren {
  LayoutApplicationsRoute: typeof LayoutApplicationsRoute
  LayoutCategoryRoute: typeof LayoutCategoryRoute
  LayoutEventsRoute: typeof LayoutEventsRouteWithChildren
  LayoutNewsRoute: typeof LayoutNewsRoute
  LayoutReportsRoute: typeof LayoutReportsRoute
  LayoutReservationsRoute: typeof LayoutReservationsRoute
  LayoutUsersRoute: typeof LayoutUsersRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutApplicationsRoute: LayoutApplicationsRoute,
  LayoutCategoryRoute: LayoutCategoryRoute,
  LayoutEventsRoute: LayoutEventsRouteWithChildren,
  LayoutNewsRoute: LayoutNewsRoute,
  LayoutReportsRoute: LayoutReportsRoute,
  LayoutReservationsRoute: LayoutReservationsRoute,
  LayoutUsersRoute: LayoutUsersRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/applications': typeof LayoutApplicationsRoute
  '/category': typeof LayoutCategoryRoute
  '/events': typeof LayoutEventsRouteWithChildren
  '/news': typeof LayoutNewsRoute
  '/reports': typeof LayoutReportsRoute
  '/reservations': typeof LayoutReservationsRoute
  '/users': typeof LayoutUsersRouteWithChildren
  '/events/$eventId': typeof LayoutEventsEventIdRoute
  '/users/$userId': typeof LayoutUsersUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/applications': typeof LayoutApplicationsRoute
  '/category': typeof LayoutCategoryRoute
  '/events': typeof LayoutEventsRouteWithChildren
  '/news': typeof LayoutNewsRoute
  '/reports': typeof LayoutReportsRoute
  '/reservations': typeof LayoutReservationsRoute
  '/users': typeof LayoutUsersRouteWithChildren
  '/events/$eventId': typeof LayoutEventsEventIdRoute
  '/users/$userId': typeof LayoutUsersUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/applications': typeof LayoutApplicationsRoute
  '/_layout/category': typeof LayoutCategoryRoute
  '/_layout/events': typeof LayoutEventsRouteWithChildren
  '/_layout/news': typeof LayoutNewsRoute
  '/_layout/reports': typeof LayoutReportsRoute
  '/_layout/reservations': typeof LayoutReservationsRoute
  '/_layout/users': typeof LayoutUsersRouteWithChildren
  '/_layout/events/$eventId': typeof LayoutEventsEventIdRoute
  '/_layout/users/$userId': typeof LayoutUsersUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/applications'
    | '/category'
    | '/events'
    | '/news'
    | '/reports'
    | '/reservations'
    | '/users'
    | '/events/$eventId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/applications'
    | '/category'
    | '/events'
    | '/news'
    | '/reports'
    | '/reservations'
    | '/users'
    | '/events/$eventId'
    | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/login'
    | '/_layout/applications'
    | '/_layout/category'
    | '/_layout/events'
    | '/_layout/news'
    | '/_layout/reports'
    | '/_layout/reservations'
    | '/_layout/users'
    | '/_layout/events/$eventId'
    | '/_layout/users/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/applications",
        "/_layout/category",
        "/_layout/events",
        "/_layout/news",
        "/_layout/reports",
        "/_layout/reservations",
        "/_layout/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/applications": {
      "filePath": "_layout/applications.tsx",
      "parent": "/_layout"
    },
    "/_layout/category": {
      "filePath": "_layout/category.tsx",
      "parent": "/_layout"
    },
    "/_layout/events": {
      "filePath": "_layout/events.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/events/$eventId"
      ]
    },
    "/_layout/news": {
      "filePath": "_layout/news.tsx",
      "parent": "/_layout"
    },
    "/_layout/reports": {
      "filePath": "_layout/reports.tsx",
      "parent": "/_layout"
    },
    "/_layout/reservations": {
      "filePath": "_layout/reservations.tsx",
      "parent": "/_layout"
    },
    "/_layout/users": {
      "filePath": "_layout/users.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/users/$userId"
      ]
    },
    "/_layout/events/$eventId": {
      "filePath": "_layout/events.$eventId.tsx",
      "parent": "/_layout/events"
    },
    "/_layout/users/$userId": {
      "filePath": "_layout/users.$userId.tsx",
      "parent": "/_layout/users"
    }
  }
}
ROUTE_MANIFEST_END */
